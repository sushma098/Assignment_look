#!/bin/bash

API_URL="https://www.travel-advisory.info/api"
DATA_FILE="data.json"

# Function to fetch country data
fetch_country_data() {
    if [ -f "$DATA_FILE" ]; then
        cat "$DATA_FILE"
    else
        curl -s "$API_URL" > "$DATA_FILE"
        cat "$DATA_FILE"
    fi
}

# Function to lookup country name by country code
lookup_country() {
    country_code=$1
    country_name=$(jq -r ".data.countries[\"$country_code\"].name" "$DATA_FILE")

    if [ "$country_name" != "null" ]; then
        echo "$country_name"
    else
        echo "Country not found"
    fi
}

# Main function
main() {
    if [ "$#" -eq 0 ]; then
        echo "Please provide country codes as arguments. Example: --countryCode=AU"
        exit 1
    fi

    country_data=$(fetch_country_data)

    for arg in "$@"; do
        if [[ "$arg" == "--countryCode="* ]]; then
            country_code=${arg#*=}
            country_name=$(lookup_country "$country_code")
            echo "$country_code: $country_name"
        fi
    done
}

# Execute main function
main "$@"

#!/bin/bash

API_URL="https://www.travel-advisory.info/api"
DATA_FILE="data.json"
PORT=8080

# Function to fetch country data
fetch_country_data() {
    if [ -f "$DATA_FILE" ]; then
        cat "$DATA_FILE"
    else
        curl -s "$API_URL" > "$DATA_FILE"
        cat "$DATA_FILE"
    fi
}

# Function to lookup country name by country code
lookup_country() {
    country_code=$1
    country_name=$(jq -r ".data.countries[\"$country_code\"].name" "$DATA_FILE")

    if [ "$country_name" != "null" ]; then
        echo "$country_name"
    else
        echo "Country not found"
    fi
}

# HTTP response headers
response_headers() {
    echo -ne "HTTP/1.1 $1 $2\r\n"
    echo -ne "Content-Type: application/json\r\n"
    echo -ne "\r\n"
}

# HTTP routes
handle_routes() {
    read -r request

    if [[ "$request" =~ ^GET.*\/health.* ]]; then
        response_headers 200 "OK"
        echo -ne "{\"status\": \"ok\"}"
    elif [[ "$request" =~ ^GET.*\/diag.* ]]; then
        response_headers 200 "OK"
        api_status=$(curl -s "$API_URL" | jq -c '.api_status')
        echo -ne "{\"api_status\": $api_status}"
    elif [[ "$request" =~ ^POST.*\/convert.* ]]; then
        content_length=0
        while read -r line; do
            if [[ "$line" =~ ^Content-Length: ]]; then
                content_length="${line#*:}"
            elif [ -z "$line" ]; then
                break
            fi
        done

        body=$(dd bs=1 count="$content_length" 2>/dev/null)
        country_name=$(echo "$body" | jq -r '.country_name')

        country_code=$(convert_to_country_code "$country_name")

        response_headers 200 "OK"
        echo -ne "{\"country_code\": \"$country_code\"}"
    else
        response_headers 404 "Not Found"
        echo -ne "Not Found"
    fi
}

# Convert country name to country code
convert_to_country_code() {
    country_name=$1
    country_data

To run the Flask service:
pip install flask
shellscript country_lookup_service.sh
brew install minikube
minikube start
kubectl apply -f deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: country-lookup-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: country-lookup-service
  template:
    metadata:
      labels:
        app: country-lookup-service
    spec:
      containers:
      - name: country-lookup-service
        image: your-docker-image:tag
        ports:
        - containerPort: 5000
kubectl expose deployment country-lookup-service --type=NodePort --port=5000









